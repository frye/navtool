// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/background_task_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i9;
import 'package:navtool/core/logging/app_logger.dart' as _i8;
import 'package:navtool/core/models/gps_position.dart' as _i7;
import 'package:navtool/core/services/download_service.dart' as _i5;
import 'package:navtool/core/services/gps_service.dart' as _i6;
import 'package:workmanager/src/options.dart' as _i4;
import 'package:workmanager/src/workmanager.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Workmanager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkmanager extends _i1.Mock implements _i2.Workmanager {
  MockWorkmanager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void executeTask(_i2.BackgroundTaskHandler? backgroundTask) =>
      super.noSuchMethod(
        Invocation.method(#executeTask, [backgroundTask]),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> initialize(
    Function? callbackDispatcher, {
    bool? isInDebugMode = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [callbackDispatcher],
              {#isInDebugMode: isInDebugMode},
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> registerOneOffTask(
    String? uniqueName,
    String? taskName, {
    String? tag,
    _i4.ExistingWorkPolicy? existingWorkPolicy,
    Duration? initialDelay = Duration.zero,
    _i4.Constraints? constraints,
    _i4.BackoffPolicy? backoffPolicy,
    Duration? backoffPolicyDelay = Duration.zero,
    _i4.OutOfQuotaPolicy? outOfQuotaPolicy,
    Map<String, dynamic>? inputData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #registerOneOffTask,
              [uniqueName, taskName],
              {
                #tag: tag,
                #existingWorkPolicy: existingWorkPolicy,
                #initialDelay: initialDelay,
                #constraints: constraints,
                #backoffPolicy: backoffPolicy,
                #backoffPolicyDelay: backoffPolicyDelay,
                #outOfQuotaPolicy: outOfQuotaPolicy,
                #inputData: inputData,
              },
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> registerPeriodicTask(
    String? uniqueName,
    String? taskName, {
    Duration? frequency,
    String? tag,
    _i4.ExistingWorkPolicy? existingWorkPolicy,
    Duration? initialDelay = Duration.zero,
    _i4.Constraints? constraints,
    _i4.BackoffPolicy? backoffPolicy,
    Duration? backoffPolicyDelay = Duration.zero,
    _i4.OutOfQuotaPolicy? outOfQuotaPolicy,
    Map<String, dynamic>? inputData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #registerPeriodicTask,
              [uniqueName, taskName],
              {
                #frequency: frequency,
                #tag: tag,
                #existingWorkPolicy: existingWorkPolicy,
                #initialDelay: initialDelay,
                #constraints: constraints,
                #backoffPolicy: backoffPolicy,
                #backoffPolicyDelay: backoffPolicyDelay,
                #outOfQuotaPolicy: outOfQuotaPolicy,
                #inputData: inputData,
              },
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelByUniqueName(String? uniqueName) =>
      (super.noSuchMethod(
            Invocation.method(#cancelByUniqueName, [uniqueName]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelByTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#cancelByTag, [tag]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [DownloadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadService extends _i1.Mock implements _i5.DownloadService {
  MockDownloadService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> downloadChart(String? chartId, String? url) =>
      (super.noSuchMethod(
            Invocation.method(#downloadChart, [chartId, url]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> pauseDownload(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#pauseDownload, [chartId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> resumeDownload(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#resumeDownload, [chartId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelDownload(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelDownload, [chartId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<String>> getDownloadQueue() =>
      (super.noSuchMethod(
            Invocation.method(#getDownloadQueue, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Stream<double> getDownloadProgress(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#getDownloadProgress, [chartId]),
            returnValue: _i3.Stream<double>.empty(),
          )
          as _i3.Stream<double>);
}

/// A class which mocks [GpsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGpsService extends _i1.Mock implements _i6.GpsService {
  MockGpsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> startLocationTracking() =>
      (super.noSuchMethod(
            Invocation.method(#startLocationTracking, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> stopLocationTracking() =>
      (super.noSuchMethod(
            Invocation.method(#stopLocationTracking, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i7.GpsPosition?> getCurrentPosition() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentPosition, []),
            returnValue: _i3.Future<_i7.GpsPosition?>.value(),
          )
          as _i3.Future<_i7.GpsPosition?>);

  @override
  _i3.Stream<_i7.GpsPosition> getLocationStream() =>
      (super.noSuchMethod(
            Invocation.method(#getLocationStream, []),
            returnValue: _i3.Stream<_i7.GpsPosition>.empty(),
          )
          as _i3.Stream<_i7.GpsPosition>);

  @override
  _i3.Future<bool> requestLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestLocationPermission, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> checkLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationPermission, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> isLocationEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isLocationEnabled, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i8.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i9.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}
