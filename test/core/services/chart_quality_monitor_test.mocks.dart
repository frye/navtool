// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/chart_quality_monitor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i11;

import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i13;
import 'package:navtool/core/logging/app_logger.dart' as _i12;
import 'package:navtool/core/models/chart.dart' as _i7;
import 'package:navtool/core/models/geographic_bounds.dart' as _i5;
import 'package:navtool/core/models/route.dart' as _i8;
import 'package:navtool/core/models/waypoint.dart' as _i9;
import 'package:navtool/core/services/cache_service.dart' as _i10;
import 'package:navtool/core/services/noaa/state_region_mapping_service.dart'
    as _i2;
import 'package:navtool/core/services/storage_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValidationResult_0 extends _i1.SmartFake
    implements _i2.ValidationResult {
  _FakeValidationResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStateCoverageInfo_1 extends _i1.SmartFake
    implements _i2.StateCoverageInfo {
  _FakeStateCoverageInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_2 extends _i1.SmartFake implements _i3.Directory {
  _FakeDirectory_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StateRegionMappingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStateRegionMappingService extends _i1.Mock
    implements _i2.StateRegionMappingService {
  MockStateRegionMappingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<String>> getChartCellsForState(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getChartCellsForState, [stateName]),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<_i5.GeographicBounds?> getStateBounds(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getStateBounds, [stateName]),
            returnValue: _i4.Future<_i5.GeographicBounds?>.value(),
          )
          as _i4.Future<_i5.GeographicBounds?>);

  @override
  _i4.Future<List<String>> getSupportedStates() =>
      (super.noSuchMethod(
            Invocation.method(#getSupportedStates, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<String?> getStateFromCoordinates(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getStateFromCoordinates, [latitude, longitude]),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> updateStateCellMapping(
    String? stateName,
    List<String>? mapping,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateStateCellMapping, [stateName, mapping]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearStateMappings() =>
      (super.noSuchMethod(
            Invocation.method(#clearStateMappings, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.MarineRegion>> getMarineRegions(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getMarineRegions, [stateName]),
            returnValue: _i4.Future<List<_i2.MarineRegion>>.value(
              <_i2.MarineRegion>[],
            ),
          )
          as _i4.Future<List<_i2.MarineRegion>>);

  @override
  _i4.Future<List<String>> getChartCellsForRegion(
    String? stateName,
    String? regionName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getChartCellsForRegion, [stateName, regionName]),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<_i2.ValidationResult> validateStateRegionMapping(
    String? stateName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateStateRegionMapping, [stateName]),
            returnValue: _i4.Future<_i2.ValidationResult>.value(
              _FakeValidationResult_0(
                this,
                Invocation.method(#validateStateRegionMapping, [stateName]),
              ),
            ),
          )
          as _i4.Future<_i2.ValidationResult>);

  @override
  _i4.Future<_i2.StateCoverageInfo> getStateCoverageInfo(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getStateCoverageInfo, [stateName]),
            returnValue: _i4.Future<_i2.StateCoverageInfo>.value(
              _FakeStateCoverageInfo_1(
                this,
                Invocation.method(#getStateCoverageInfo, [stateName]),
              ),
            ),
          )
          as _i4.Future<_i2.StateCoverageInfo>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i6.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> storeChart(_i7.Chart? chart, List<int>? data) =>
      (super.noSuchMethod(
            Invocation.method(#storeChart, [chart, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<int>?> loadChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#loadChart, [chartId]),
            returnValue: _i4.Future<List<int>?>.value(),
          )
          as _i4.Future<List<int>?>);

  @override
  _i4.Future<void> deleteChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteChart, [chartId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>> getStorageInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageInfo, []),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> cleanupOldData() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupOldData, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> getStorageUsage() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageUsage, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i3.Directory> getChartsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getChartsDirectory, []),
            returnValue: _i4.Future<_i3.Directory>.value(
              _FakeDirectory_2(
                this,
                Invocation.method(#getChartsDirectory, []),
              ),
            ),
          )
          as _i4.Future<_i3.Directory>);

  @override
  _i4.Future<void> storeRoute(_i8.NavigationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#storeRoute, [route]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i8.NavigationRoute?> loadRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#loadRoute, [routeId]),
            returnValue: _i4.Future<_i8.NavigationRoute?>.value(),
          )
          as _i4.Future<_i8.NavigationRoute?>);

  @override
  _i4.Future<void> deleteRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoute, [routeId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.NavigationRoute>> getAllRoutes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRoutes, []),
            returnValue: _i4.Future<List<_i8.NavigationRoute>>.value(
              <_i8.NavigationRoute>[],
            ),
          )
          as _i4.Future<List<_i8.NavigationRoute>>);

  @override
  _i4.Future<void> storeWaypoint(_i9.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#storeWaypoint, [waypoint]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i9.Waypoint?> loadWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#loadWaypoint, [waypointId]),
            returnValue: _i4.Future<_i9.Waypoint?>.value(),
          )
          as _i4.Future<_i9.Waypoint?>);

  @override
  _i4.Future<void> updateWaypoint(_i9.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#updateWaypoint, [waypoint]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWaypoint, [waypointId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i9.Waypoint>> getAllWaypoints() =>
      (super.noSuchMethod(
            Invocation.method(#getAllWaypoints, []),
            returnValue: _i4.Future<List<_i9.Waypoint>>.value(<_i9.Waypoint>[]),
          )
          as _i4.Future<List<_i9.Waypoint>>);

  @override
  _i4.Future<void> storeStateCellMapping(
    String? stateName,
    List<String>? chartCells,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#storeStateCellMapping, [stateName, chartCells]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<String>?> getStateCellMapping(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getStateCellMapping, [stateName]),
            returnValue: _i4.Future<List<String>?>.value(),
          )
          as _i4.Future<List<String>?>);

  @override
  _i4.Future<void> clearAllStateCellMappings() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllStateCellMappings, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i7.Chart>> getChartsInBounds(_i5.GeographicBounds? bounds) =>
      (super.noSuchMethod(
            Invocation.method(#getChartsInBounds, [bounds]),
            returnValue: _i4.Future<List<_i7.Chart>>.value(<_i7.Chart>[]),
          )
          as _i4.Future<List<_i7.Chart>>);

  @override
  _i4.Future<int> countChartsWithInvalidBounds() =>
      (super.noSuchMethod(
            Invocation.method(#countChartsWithInvalidBounds, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> clearChartsWithInvalidBounds() =>
      (super.noSuchMethod(
            Invocation.method(#clearChartsWithInvalidBounds, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i10.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> store(
    String? key,
    _i11.Uint8List? data, {
    Duration? maxAge,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#store, [key, data], {#maxAge: maxAge}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i11.Uint8List?> get(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key]),
            returnValue: _i4.Future<_i11.Uint8List?>.value(),
          )
          as _i4.Future<_i11.Uint8List?>);

  @override
  _i4.Future<bool> exists(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [key]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<int> getSize() =>
      (super.noSuchMethod(
            Invocation.method(#getSize, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> cleanupExpired() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupExpired, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<Map<String, dynamic>> getStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getStatistics, []),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<bool> isExpired(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isExpired, [key]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> setExpiration(String? key, DateTime? expiration) =>
      (super.noSuchMethod(
            Invocation.method(#setExpiration, [key, expiration]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void validateKey(String? key) => super.noSuchMethod(
    Invocation.method(#validateKey, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void storeInMemory(String? key, _i11.Uint8List? data) => super.noSuchMethod(
    Invocation.method(#storeInMemory, [key, data]),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Uint8List? getFromMemory(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFromMemory, [key]))
          as _i11.Uint8List?);

  @override
  void removeFromMemory(String? key) => super.noSuchMethod(
    Invocation.method(#removeFromMemory, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void clearMemoryCache() => super.noSuchMethod(
    Invocation.method(#clearMemoryCache, []),
    returnValueForMissingStub: null,
  );

  @override
  int getMemoryCacheSize() =>
      (super.noSuchMethod(
            Invocation.method(#getMemoryCacheSize, []),
            returnValue: 0,
          )
          as int);

  @override
  void setMemoryCacheLimit(int? maxEntries) => super.noSuchMethod(
    Invocation.method(#setMemoryCacheLimit, [maxEntries]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i12.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i13.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}
