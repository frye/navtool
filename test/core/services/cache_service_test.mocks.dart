// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/cache_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i10;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:navtool/core/error/app_error.dart' as _i5;
import 'package:navtool/core/logging/app_logger.dart' as _i4;
import 'package:navtool/core/models/compression_result.dart' as _i3;
import 'package:navtool/core/services/compression_service.dart' as _i9;
import 'package:navtool/core/services/file_system_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_1 extends _i1.SmartFake implements _i2.File {
  _FakeFile_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCompressionResult_2 extends _i1.SmartFake
    implements _i3.CompressionResult {
  _FakeCompressionResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i4.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i5.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FileSystemService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystemService extends _i1.Mock implements _i6.FileSystemService {
  MockFileSystemService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i2.Directory> getApplicationDocumentsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getApplicationDocumentsDirectory, []),
            returnValue: _i7.Future<_i2.Directory>.value(
              _FakeDirectory_0(
                this,
                Invocation.method(#getApplicationDocumentsDirectory, []),
              ),
            ),
          )
          as _i7.Future<_i2.Directory>);

  @override
  _i7.Future<_i2.Directory> getApplicationSupportDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getApplicationSupportDirectory, []),
            returnValue: _i7.Future<_i2.Directory>.value(
              _FakeDirectory_0(
                this,
                Invocation.method(#getApplicationSupportDirectory, []),
              ),
            ),
          )
          as _i7.Future<_i2.Directory>);

  @override
  _i7.Future<_i2.Directory> getTemporaryDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getTemporaryDirectory, []),
            returnValue: _i7.Future<_i2.Directory>.value(
              _FakeDirectory_0(
                this,
                Invocation.method(#getTemporaryDirectory, []),
              ),
            ),
          )
          as _i7.Future<_i2.Directory>);

  @override
  _i7.Future<_i2.Directory> getChartsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getChartsDirectory, []),
            returnValue: _i7.Future<_i2.Directory>.value(
              _FakeDirectory_0(
                this,
                Invocation.method(#getChartsDirectory, []),
              ),
            ),
          )
          as _i7.Future<_i2.Directory>);

  @override
  _i7.Future<_i2.Directory> getRoutesDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getRoutesDirectory, []),
            returnValue: _i7.Future<_i2.Directory>.value(
              _FakeDirectory_0(
                this,
                Invocation.method(#getRoutesDirectory, []),
              ),
            ),
          )
          as _i7.Future<_i2.Directory>);

  @override
  _i7.Future<_i2.Directory> getCacheDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheDirectory, []),
            returnValue: _i7.Future<_i2.Directory>.value(
              _FakeDirectory_0(this, Invocation.method(#getCacheDirectory, [])),
            ),
          )
          as _i7.Future<_i2.Directory>);

  @override
  _i7.Future<bool> ensureDirectoryExists(_i2.Directory? directory) =>
      (super.noSuchMethod(
            Invocation.method(#ensureDirectoryExists, [directory]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<_i2.File> writeChartFile(String? fileName, List<int>? bytes) =>
      (super.noSuchMethod(
            Invocation.method(#writeChartFile, [fileName, bytes]),
            returnValue: _i7.Future<_i2.File>.value(
              _FakeFile_1(
                this,
                Invocation.method(#writeChartFile, [fileName, bytes]),
              ),
            ),
          )
          as _i7.Future<_i2.File>);

  @override
  _i7.Future<List<int>> readChartFile(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#readChartFile, [fileName]),
            returnValue: _i7.Future<List<int>>.value(<int>[]),
          )
          as _i7.Future<List<int>>);

  @override
  _i7.Future<bool> deleteChartFile(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#deleteChartFile, [fileName]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> chartFileExists(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#chartFileExists, [fileName]),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<int?> getChartFileSize(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#getChartFileSize, [fileName]),
            returnValue: _i7.Future<int?>.value(),
          )
          as _i7.Future<int?>);

  @override
  _i7.Future<_i2.File> exportRoute(String? routeName, String? routeData) =>
      (super.noSuchMethod(
            Invocation.method(#exportRoute, [routeName, routeData]),
            returnValue: _i7.Future<_i2.File>.value(
              _FakeFile_1(
                this,
                Invocation.method(#exportRoute, [routeName, routeData]),
              ),
            ),
          )
          as _i7.Future<_i2.File>);

  @override
  _i7.Future<String> importRoute(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#importRoute, [filePath]),
            returnValue: _i7.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#importRoute, [filePath]),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<List<_i2.File>> listRouteFiles() =>
      (super.noSuchMethod(
            Invocation.method(#listRouteFiles, []),
            returnValue: _i7.Future<List<_i2.File>>.value(<_i2.File>[]),
          )
          as _i7.Future<List<_i2.File>>);

  @override
  _i7.Future<bool> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<int> getCacheSize() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheSize, []),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  bool isValidChartFile(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#isValidChartFile, [fileName]),
            returnValue: false,
          )
          as bool);

  @override
  bool isValidRouteFile(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#isValidRouteFile, [fileName]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [CompressionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompressionService extends _i1.Mock
    implements _i9.CompressionService {
  MockCompressionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.CompressionResult> compressChartData(
    _i10.Uint8List? data, {
    required String? chartId,
    _i3.CompressionLevel? level = _i3.CompressionLevel.balanced,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #compressChartData,
              [data],
              {#chartId: chartId, #level: level},
            ),
            returnValue: _i7.Future<_i3.CompressionResult>.value(
              _FakeCompressionResult_2(
                this,
                Invocation.method(
                  #compressChartData,
                  [data],
                  {#chartId: chartId, #level: level},
                ),
              ),
            ),
          )
          as _i7.Future<_i3.CompressionResult>);

  @override
  _i7.Future<_i10.Uint8List> decompressChartData(
    _i10.Uint8List? compressedData, {
    required String? chartId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #decompressChartData,
              [compressedData],
              {#chartId: chartId},
            ),
            returnValue: _i7.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
          )
          as _i7.Future<_i10.Uint8List>);

  @override
  _i7.Future<_i3.CompressionResult> compressChartDataWithSettings(
    _i10.Uint8List? data, {
    required String? chartId,
    required _i3.CompressionSettings? settings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #compressChartDataWithSettings,
              [data],
              {#chartId: chartId, #settings: settings},
            ),
            returnValue: _i7.Future<_i3.CompressionResult>.value(
              _FakeCompressionResult_2(
                this,
                Invocation.method(
                  #compressChartDataWithSettings,
                  [data],
                  {#chartId: chartId, #settings: settings},
                ),
              ),
            ),
          )
          as _i7.Future<_i3.CompressionResult>);

  @override
  _i7.Future<_i3.CompressionResult> compressRouteData(
    _i10.Uint8List? routeData, {
    required String? routeId,
    _i3.CompressionLevel? level = _i3.CompressionLevel.balanced,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #compressRouteData,
              [routeData],
              {#routeId: routeId, #level: level},
            ),
            returnValue: _i7.Future<_i3.CompressionResult>.value(
              _FakeCompressionResult_2(
                this,
                Invocation.method(
                  #compressRouteData,
                  [routeData],
                  {#routeId: routeId, #level: level},
                ),
              ),
            ),
          )
          as _i7.Future<_i3.CompressionResult>);

  @override
  _i7.Future<_i10.Uint8List> decompressRouteData(
    _i10.Uint8List? compressedData, {
    required String? routeId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #decompressRouteData,
              [compressedData],
              {#routeId: routeId},
            ),
            returnValue: _i7.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
          )
          as _i7.Future<_i10.Uint8List>);

  @override
  _i7.Future<_i3.CompressionResult> compressRoutesBackup(
    List<_i10.Uint8List>? routesData, {
    required String? backupId,
    _i3.CompressionLevel? level = _i3.CompressionLevel.maximum,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #compressRoutesBackup,
              [routesData],
              {#backupId: backupId, #level: level},
            ),
            returnValue: _i7.Future<_i3.CompressionResult>.value(
              _FakeCompressionResult_2(
                this,
                Invocation.method(
                  #compressRoutesBackup,
                  [routesData],
                  {#backupId: backupId, #level: level},
                ),
              ),
            ),
          )
          as _i7.Future<_i3.CompressionResult>);

  @override
  _i7.Future<List<_i3.ExtractedFile>> extractChartArchive(
    _i10.Uint8List? archiveData, {
    required String? chartId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #extractChartArchive,
              [archiveData],
              {#chartId: chartId},
            ),
            returnValue: _i7.Future<List<_i3.ExtractedFile>>.value(
              <_i3.ExtractedFile>[],
            ),
          )
          as _i7.Future<List<_i3.ExtractedFile>>);

  @override
  _i7.Future<_i3.CompressionResult> compressCacheData(
    _i10.Uint8List? cacheData, {
    required String? cacheKey,
    _i3.CompressionLevel? level = _i3.CompressionLevel.balanced,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #compressCacheData,
              [cacheData],
              {#cacheKey: cacheKey, #level: level},
            ),
            returnValue: _i7.Future<_i3.CompressionResult>.value(
              _FakeCompressionResult_2(
                this,
                Invocation.method(
                  #compressCacheData,
                  [cacheData],
                  {#cacheKey: cacheKey, #level: level},
                ),
              ),
            ),
          )
          as _i7.Future<_i3.CompressionResult>);

  @override
  _i7.Future<_i10.Uint8List> decompressCacheData(
    _i10.Uint8List? compressedData, {
    required String? cacheKey,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #decompressCacheData,
              [compressedData],
              {#cacheKey: cacheKey},
            ),
            returnValue: _i7.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
          )
          as _i7.Future<_i10.Uint8List>);

  @override
  _i7.Future<Map<String, dynamic>> getCompressionStats() =>
      (super.noSuchMethod(
            Invocation.method(#getCompressionStats, []),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<void> cleanup() =>
      (super.noSuchMethod(
            Invocation.method(#cleanup, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}
