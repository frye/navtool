// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/state_region_mapping_service_enhanced_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i11;

import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i14;
import 'package:navtool/core/logging/app_logger.dart' as _i13;
import 'package:navtool/core/models/chart.dart' as _i6;
import 'package:navtool/core/models/geographic_bounds.dart' as _i9;
import 'package:navtool/core/models/route.dart' as _i7;
import 'package:navtool/core/models/waypoint.dart' as _i8;
import 'package:navtool/core/services/cache_service.dart' as _i10;
import 'package:navtool/core/services/http_client_service.dart' as _i12;
import 'package:navtool/core/services/storage_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDio_1 extends _i1.SmartFake implements _i3.Dio {
  _FakeDio_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_2<T> extends _i1.SmartFake implements _i3.Response<T> {
  _FakeResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i4.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> storeChart(_i6.Chart? chart, List<int>? data) =>
      (super.noSuchMethod(
            Invocation.method(#storeChart, [chart, data]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<int>?> loadChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#loadChart, [chartId]),
            returnValue: _i5.Future<List<int>?>.value(),
          )
          as _i5.Future<List<int>?>);

  @override
  _i5.Future<void> deleteChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteChart, [chartId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> getStorageInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageInfo, []),
            returnValue: _i5.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<void> cleanupOldData() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupOldData, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<int> getStorageUsage() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageUsage, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<_i2.Directory> getChartsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getChartsDirectory, []),
            returnValue: _i5.Future<_i2.Directory>.value(
              _FakeDirectory_0(
                this,
                Invocation.method(#getChartsDirectory, []),
              ),
            ),
          )
          as _i5.Future<_i2.Directory>);

  @override
  _i5.Future<void> storeRoute(_i7.NavigationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#storeRoute, [route]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i7.NavigationRoute?> loadRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#loadRoute, [routeId]),
            returnValue: _i5.Future<_i7.NavigationRoute?>.value(),
          )
          as _i5.Future<_i7.NavigationRoute?>);

  @override
  _i5.Future<void> deleteRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoute, [routeId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i7.NavigationRoute>> getAllRoutes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRoutes, []),
            returnValue: _i5.Future<List<_i7.NavigationRoute>>.value(
              <_i7.NavigationRoute>[],
            ),
          )
          as _i5.Future<List<_i7.NavigationRoute>>);

  @override
  _i5.Future<void> storeWaypoint(_i8.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#storeWaypoint, [waypoint]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i8.Waypoint?> loadWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#loadWaypoint, [waypointId]),
            returnValue: _i5.Future<_i8.Waypoint?>.value(),
          )
          as _i5.Future<_i8.Waypoint?>);

  @override
  _i5.Future<void> updateWaypoint(_i8.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#updateWaypoint, [waypoint]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWaypoint, [waypointId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i8.Waypoint>> getAllWaypoints() =>
      (super.noSuchMethod(
            Invocation.method(#getAllWaypoints, []),
            returnValue: _i5.Future<List<_i8.Waypoint>>.value(<_i8.Waypoint>[]),
          )
          as _i5.Future<List<_i8.Waypoint>>);

  @override
  _i5.Future<void> storeStateCellMapping(
    String? stateName,
    List<String>? chartCells,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#storeStateCellMapping, [stateName, chartCells]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<String>?> getStateCellMapping(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getStateCellMapping, [stateName]),
            returnValue: _i5.Future<List<String>?>.value(),
          )
          as _i5.Future<List<String>?>);

  @override
  _i5.Future<void> clearAllStateCellMappings() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllStateCellMappings, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.Chart>> getChartsInBounds(_i9.GeographicBounds? bounds) =>
      (super.noSuchMethod(
            Invocation.method(#getChartsInBounds, [bounds]),
            returnValue: _i5.Future<List<_i6.Chart>>.value(<_i6.Chart>[]),
          )
          as _i5.Future<List<_i6.Chart>>);

  @override
  _i5.Future<int> countChartsWithInvalidBounds() =>
      (super.noSuchMethod(
            Invocation.method(#countChartsWithInvalidBounds, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> clearChartsWithInvalidBounds() =>
      (super.noSuchMethod(
            Invocation.method(#clearChartsWithInvalidBounds, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);
}

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i10.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> store(
    String? key,
    _i11.Uint8List? data, {
    Duration? maxAge,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#store, [key, data], {#maxAge: maxAge}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i11.Uint8List?> get(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key]),
            returnValue: _i5.Future<_i11.Uint8List?>.value(),
          )
          as _i5.Future<_i11.Uint8List?>);

  @override
  _i5.Future<bool> exists(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [key]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> getSize() =>
      (super.noSuchMethod(
            Invocation.method(#getSize, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> cleanupExpired() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupExpired, []),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<Map<String, dynamic>> getStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getStatistics, []),
            returnValue: _i5.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<bool> isExpired(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isExpired, [key]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> setExpiration(String? key, DateTime? expiration) =>
      (super.noSuchMethod(
            Invocation.method(#setExpiration, [key, expiration]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void validateKey(String? key) => super.noSuchMethod(
    Invocation.method(#validateKey, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void storeInMemory(String? key, _i11.Uint8List? data) => super.noSuchMethod(
    Invocation.method(#storeInMemory, [key, data]),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Uint8List? getFromMemory(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFromMemory, [key]))
          as _i11.Uint8List?);

  @override
  void removeFromMemory(String? key) => super.noSuchMethod(
    Invocation.method(#removeFromMemory, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void clearMemoryCache() => super.noSuchMethod(
    Invocation.method(#clearMemoryCache, []),
    returnValueForMissingStub: null,
  );

  @override
  int getMemoryCacheSize() =>
      (super.noSuchMethod(
            Invocation.method(#getMemoryCacheSize, []),
            returnValue: 0,
          )
          as int);

  @override
  void setMemoryCacheLimit(int? maxEntries) => super.noSuchMethod(
    Invocation.method(#setMemoryCacheLimit, [maxEntries]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [HttpClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientService extends _i1.Mock implements _i12.HttpClientService {
  MockHttpClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Dio get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeDio_1(this, Invocation.getter(#client)),
          )
          as _i3.Dio);

  @override
  void configureNoaaEndpoints() => super.noSuchMethod(
    Invocation.method(#configureNoaaEndpoints, []),
    returnValueForMissingStub: null,
  );

  @override
  void configureCertificatePinning() => super.noSuchMethod(
    Invocation.method(#configureCertificatePinning, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> downloadFile(
    String? url,
    String? savePath, {
    _i3.ProgressCallback? onReceiveProgress,
    _i3.CancelToken? cancelToken,
    Map<String, dynamic>? queryParameters,
    int? resumeFrom,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadFile,
              [url, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #queryParameters: queryParameters,
                #resumeFrom: resumeFrom,
              },
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.Response<dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i5.Future<_i3.Response<dynamic>>.value(
              _FakeResponse_2<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.Response<dynamic>>);

  @override
  _i5.Future<_i3.Response<dynamic>> head(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #head,
              [path],
              {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i5.Future<_i3.Response<dynamic>>.value(
              _FakeResponse_2<dynamic>(
                this,
                Invocation.method(
                  #head,
                  [path],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.Response<dynamic>>);

  @override
  _i5.Future<_i3.Response<dynamic>> post(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i5.Future<_i3.Response<dynamic>>.value(
              _FakeResponse_2<dynamic>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i5.Future<_i3.Response<dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i13.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i14.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}
