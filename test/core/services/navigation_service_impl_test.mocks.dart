// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/navigation_service_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i4;
import 'package:navtool/core/logging/app_logger.dart' as _i3;
import 'package:navtool/core/models/chart.dart' as _i7;
import 'package:navtool/core/models/route.dart' as _i8;
import 'package:navtool/core/models/waypoint.dart' as _i9;
import 'package:navtool/core/services/storage_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i3.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i4.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i5.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> storeChart(_i7.Chart? chart, List<int>? data) =>
      (super.noSuchMethod(
            Invocation.method(#storeChart, [chart, data]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<int>?> loadChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#loadChart, [chartId]),
            returnValue: _i6.Future<List<int>?>.value(),
          )
          as _i6.Future<List<int>?>);

  @override
  _i6.Future<void> deleteChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteChart, [chartId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, dynamic>> getStorageInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageInfo, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<void> cleanupOldData() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupOldData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<int> getStorageUsage() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageUsage, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<_i2.Directory> getChartsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getChartsDirectory, []),
            returnValue: _i6.Future<_i2.Directory>.value(
              _FakeDirectory_0(
                this,
                Invocation.method(#getChartsDirectory, []),
              ),
            ),
          )
          as _i6.Future<_i2.Directory>);

  @override
  _i6.Future<void> storeRoute(_i8.NavigationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#storeRoute, [route]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i8.NavigationRoute?> loadRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#loadRoute, [routeId]),
            returnValue: _i6.Future<_i8.NavigationRoute?>.value(),
          )
          as _i6.Future<_i8.NavigationRoute?>);

  @override
  _i6.Future<void> deleteRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoute, [routeId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i8.NavigationRoute>> getAllRoutes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRoutes, []),
            returnValue: _i6.Future<List<_i8.NavigationRoute>>.value(
              <_i8.NavigationRoute>[],
            ),
          )
          as _i6.Future<List<_i8.NavigationRoute>>);

  @override
  _i6.Future<void> storeWaypoint(_i9.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#storeWaypoint, [waypoint]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i9.Waypoint?> loadWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#loadWaypoint, [waypointId]),
            returnValue: _i6.Future<_i9.Waypoint?>.value(),
          )
          as _i6.Future<_i9.Waypoint?>);

  @override
  _i6.Future<void> updateWaypoint(_i9.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#updateWaypoint, [waypoint]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWaypoint, [waypointId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i9.Waypoint>> getAllWaypoints() =>
      (super.noSuchMethod(
            Invocation.method(#getAllWaypoints, []),
            returnValue: _i6.Future<List<_i9.Waypoint>>.value(<_i9.Waypoint>[]),
          )
          as _i6.Future<List<_i9.Waypoint>>);
}
