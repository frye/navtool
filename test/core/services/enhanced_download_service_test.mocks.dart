// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/enhanced_download_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i15;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i16;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:navtool/core/error/app_error.dart' as _i13;
import 'package:navtool/core/error/error_handler.dart' as _i5;
import 'package:navtool/core/logging/app_logger.dart' as _i4;
import 'package:navtool/core/models/chart.dart' as _i9;
import 'package:navtool/core/models/geographic_bounds.dart' as _i12;
import 'package:navtool/core/models/route.dart' as _i10;
import 'package:navtool/core/models/waypoint.dart' as _i11;
import 'package:navtool/core/services/http_client_service.dart' as _i7;
import 'package:navtool/core/services/storage_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_1<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_2 extends _i1.SmartFake implements _i3.Directory {
  _FakeDirectory_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppLogger_3 extends _i1.SmartFake implements _i4.AppLogger {
  _FakeAppLogger_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeErrorRecoveryStrategy_4 extends _i1.SmartFake
    implements _i5.ErrorRecoveryStrategy {
  _FakeErrorRecoveryStrategy_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_5<T1> extends _i1.SmartFake implements _i6.Future<T1> {
  _FakeFuture_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_6 extends _i1.SmartFake implements Uri {
  _FakeUri_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSystemEntity_7 extends _i1.SmartFake
    implements _i3.FileSystemEntity {
  _FakeFileSystemEntity_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileStat_8 extends _i1.SmartFake implements _i3.FileStat {
  _FakeFileStat_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_9 extends _i1.SmartFake implements _i3.File {
  _FakeFile_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_10 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRandomAccessFile_11 extends _i1.SmartFake
    implements _i3.RandomAccessFile {
  _FakeRandomAccessFile_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSink_12 extends _i1.SmartFake implements _i3.IOSink {
  _FakeIOSink_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HttpClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientService extends _i1.Mock implements _i7.HttpClientService {
  MockHttpClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeDio_0(this, Invocation.getter(#client)),
          )
          as _i2.Dio);

  @override
  void configureNoaaEndpoints() => super.noSuchMethod(
    Invocation.method(#configureNoaaEndpoints, []),
    returnValueForMissingStub: null,
  );

  @override
  void configureCertificatePinning() => super.noSuchMethod(
    Invocation.method(#configureCertificatePinning, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> downloadFile(
    String? url,
    String? savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    Map<String, dynamic>? queryParameters,
    int? resumeFrom,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadFile,
              [url, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #queryParameters: queryParameters,
                #resumeFrom: resumeFrom,
              },
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i2.Response<dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_1<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> post(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_1<dynamic>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i8.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> storeChart(_i9.Chart? chart, List<int>? data) =>
      (super.noSuchMethod(
            Invocation.method(#storeChart, [chart, data]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<int>?> loadChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#loadChart, [chartId]),
            returnValue: _i6.Future<List<int>?>.value(),
          )
          as _i6.Future<List<int>?>);

  @override
  _i6.Future<void> deleteChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteChart, [chartId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, dynamic>> getStorageInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageInfo, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<void> cleanupOldData() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupOldData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<int> getStorageUsage() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageUsage, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<_i3.Directory> getChartsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getChartsDirectory, []),
            returnValue: _i6.Future<_i3.Directory>.value(
              _FakeDirectory_2(
                this,
                Invocation.method(#getChartsDirectory, []),
              ),
            ),
          )
          as _i6.Future<_i3.Directory>);

  @override
  _i6.Future<void> storeRoute(_i10.NavigationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#storeRoute, [route]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i10.NavigationRoute?> loadRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#loadRoute, [routeId]),
            returnValue: _i6.Future<_i10.NavigationRoute?>.value(),
          )
          as _i6.Future<_i10.NavigationRoute?>);

  @override
  _i6.Future<void> deleteRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoute, [routeId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i10.NavigationRoute>> getAllRoutes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRoutes, []),
            returnValue: _i6.Future<List<_i10.NavigationRoute>>.value(
              <_i10.NavigationRoute>[],
            ),
          )
          as _i6.Future<List<_i10.NavigationRoute>>);

  @override
  _i6.Future<void> storeWaypoint(_i11.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#storeWaypoint, [waypoint]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i11.Waypoint?> loadWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#loadWaypoint, [waypointId]),
            returnValue: _i6.Future<_i11.Waypoint?>.value(),
          )
          as _i6.Future<_i11.Waypoint?>);

  @override
  _i6.Future<void> updateWaypoint(_i11.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#updateWaypoint, [waypoint]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWaypoint, [waypointId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i11.Waypoint>> getAllWaypoints() =>
      (super.noSuchMethod(
            Invocation.method(#getAllWaypoints, []),
            returnValue: _i6.Future<List<_i11.Waypoint>>.value(
              <_i11.Waypoint>[],
            ),
          )
          as _i6.Future<List<_i11.Waypoint>>);

  @override
  _i6.Future<void> storeStateCellMapping(
    String? stateName,
    List<String>? chartCells,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#storeStateCellMapping, [stateName, chartCells]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<String>?> getStateCellMapping(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getStateCellMapping, [stateName]),
            returnValue: _i6.Future<List<String>?>.value(),
          )
          as _i6.Future<List<String>?>);

  @override
  _i6.Future<void> clearAllStateCellMappings() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllStateCellMappings, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i9.Chart>> getChartsInBounds(
    _i12.GeographicBounds? bounds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getChartsInBounds, [bounds]),
            returnValue: _i6.Future<List<_i9.Chart>>.value(<_i9.Chart>[]),
          )
          as _i6.Future<List<_i9.Chart>>);

  @override
  _i6.Future<int> countChartsWithInvalidBounds() =>
      (super.noSuchMethod(
            Invocation.method(#countChartsWithInvalidBounds, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<int> clearChartsWithInvalidBounds() =>
      (super.noSuchMethod(
            Invocation.method(#clearChartsWithInvalidBounds, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i4.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i13.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ErrorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorHandler extends _i1.Mock implements _i5.ErrorHandler {
  MockErrorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AppLogger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeAppLogger_3(this, Invocation.getter(#logger)),
          )
          as _i4.AppLogger);

  @override
  void handleError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#handleError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  bool shouldRetry(_i13.AppError? error) =>
      (super.noSuchMethod(
            Invocation.method(#shouldRetry, [error]),
            returnValue: false,
          )
          as bool);

  @override
  String getUserMessage(_i13.AppError? error) =>
      (super.noSuchMethod(
            Invocation.method(#getUserMessage, [error]),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#getUserMessage, [error]),
            ),
          )
          as String);

  @override
  _i5.ErrorRecoveryStrategy getRecoveryStrategy(_i13.AppError? error) =>
      (super.noSuchMethod(
            Invocation.method(#getRecoveryStrategy, [error]),
            returnValue: _FakeErrorRecoveryStrategy_4(
              this,
              Invocation.method(#getRecoveryStrategy, [error]),
            ),
          )
          as _i5.ErrorRecoveryStrategy);

  @override
  _i6.Future<T> handleWithRetry<T>(
    _i6.Future<T> Function()? operation, {
    int? maxRetries = 3,
    Duration? delay = const Duration(seconds: 1),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleWithRetry,
              [operation],
              {#maxRetries: maxRetries, #delay: delay},
            ),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #handleWithRetry,
                      [operation],
                      {#maxRetries: maxRetries, #delay: delay},
                    ),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_5<T>(
                  this,
                  Invocation.method(
                    #handleWithRetry,
                    [operation],
                    {#maxRetries: maxRetries, #delay: delay},
                  ),
                ),
          )
          as _i6.Future<T>);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i3.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_6(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  _i3.Directory get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeDirectory_2(this, Invocation.getter(#absolute)),
          )
          as _i3.Directory);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);

  @override
  _i3.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_2(this, Invocation.getter(#parent)),
          )
          as _i3.Directory);

  @override
  _i6.Future<_i3.Directory> create({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {#recursive: recursive}),
            returnValue: _i6.Future<_i3.Directory>.value(
              _FakeDirectory_2(
                this,
                Invocation.method(#create, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i6.Future<_i3.Directory>);

  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#createSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i3.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(
            Invocation.method(#createTemp, [prefix]),
            returnValue: _i6.Future<_i3.Directory>.value(
              _FakeDirectory_2(this, Invocation.method(#createTemp, [prefix])),
            ),
          )
          as _i6.Future<_i3.Directory>);

  @override
  _i3.Directory createTempSync([String? prefix]) =>
      (super.noSuchMethod(
            Invocation.method(#createTempSync, [prefix]),
            returnValue: _FakeDirectory_2(
              this,
              Invocation.method(#createTempSync, [prefix]),
            ),
          )
          as _i3.Directory);

  @override
  _i6.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i6.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i6.Future<_i3.Directory> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i6.Future<_i3.Directory>.value(
              _FakeDirectory_2(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i6.Future<_i3.Directory>);

  @override
  _i3.Directory renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeDirectory_2(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i3.Directory);

  @override
  _i6.Future<_i3.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i6.Future<_i3.FileSystemEntity>.value(
              _FakeFileSystemEntity_7(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i6.Future<_i3.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Stream<_i3.FileSystemEntity> list({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#list, [], {
              #recursive: recursive,
              #followLinks: followLinks,
            }),
            returnValue: _i6.Stream<_i3.FileSystemEntity>.empty(),
          )
          as _i6.Stream<_i3.FileSystemEntity>);

  @override
  List<_i3.FileSystemEntity> listSync({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listSync, [], {
              #recursive: recursive,
              #followLinks: followLinks,
            }),
            returnValue: <_i3.FileSystemEntity>[],
          )
          as List<_i3.FileSystemEntity>);

  @override
  _i6.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<_i3.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i6.Future<_i3.FileStat>.value(
              _FakeFileStat_8(this, Invocation.method(#stat, [])),
            ),
          )
          as _i6.Future<_i3.FileStat>);

  @override
  _i3.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_8(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i3.FileStat);

  @override
  _i6.Stream<_i3.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i6.Stream<_i3.FileSystemEvent>.empty(),
          )
          as _i6.Stream<_i3.FileSystemEvent>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i3.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.File get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeFile_9(this, Invocation.getter(#absolute)),
          )
          as _i3.File);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_6(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);

  @override
  _i3.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_2(this, Invocation.getter(#parent)),
          )
          as _i3.Directory);

  @override
  _i6.Future<_i3.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #recursive: recursive,
              #exclusive: exclusive,
            }),
            returnValue: _i6.Future<_i3.File>.value(
              _FakeFile_9(
                this,
                Invocation.method(#create, [], {
                  #recursive: recursive,
                  #exclusive: exclusive,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.File>);

  @override
  void createSync({bool? recursive = false, bool? exclusive = false}) =>
      super.noSuchMethod(
        Invocation.method(#createSync, [], {
          #recursive: recursive,
          #exclusive: exclusive,
        }),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.File> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i6.Future<_i3.File>.value(
              _FakeFile_9(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i6.Future<_i3.File>);

  @override
  _i3.File renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeFile_9(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i3.File);

  @override
  _i6.Future<_i3.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i6.Future<_i3.FileSystemEntity>.value(
              _FakeFileSystemEntity_7(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i6.Future<_i3.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i3.File> copy(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copy, [newPath]),
            returnValue: _i6.Future<_i3.File>.value(
              _FakeFile_9(this, Invocation.method(#copy, [newPath])),
            ),
          )
          as _i6.Future<_i3.File>);

  @override
  _i3.File copySync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copySync, [newPath]),
            returnValue: _FakeFile_9(
              this,
              Invocation.method(#copySync, [newPath]),
            ),
          )
          as _i3.File);

  @override
  _i6.Future<int> length() =>
      (super.noSuchMethod(
            Invocation.method(#length, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);

  @override
  _i6.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessed, []),
            returnValue: _i6.Future<DateTime>.value(
              _FakeDateTime_10(this, Invocation.method(#lastAccessed, [])),
            ),
          )
          as _i6.Future<DateTime>);

  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessedSync, []),
            returnValue: _FakeDateTime_10(
              this,
              Invocation.method(#lastAccessedSync, []),
            ),
          )
          as DateTime);

  @override
  _i6.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastAccessed, [time]),
            returnValue: _i6.Future<dynamic>.value(),
          )
          as _i6.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastAccessedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<DateTime> lastModified() =>
      (super.noSuchMethod(
            Invocation.method(#lastModified, []),
            returnValue: _i6.Future<DateTime>.value(
              _FakeDateTime_10(this, Invocation.method(#lastModified, [])),
            ),
          )
          as _i6.Future<DateTime>);

  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastModifiedSync, []),
            returnValue: _FakeDateTime_10(
              this,
              Invocation.method(#lastModifiedSync, []),
            ),
          )
          as DateTime);

  @override
  _i6.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastModified, [time]),
            returnValue: _i6.Future<dynamic>.value(),
          )
          as _i6.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastModifiedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i3.RandomAccessFile> open({
    _i3.FileMode? mode = _i3.FileMode.read,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#open, [], {#mode: mode}),
            returnValue: _i6.Future<_i3.RandomAccessFile>.value(
              _FakeRandomAccessFile_11(
                this,
                Invocation.method(#open, [], {#mode: mode}),
              ),
            ),
          )
          as _i6.Future<_i3.RandomAccessFile>);

  @override
  _i3.RandomAccessFile openSync({_i3.FileMode? mode = _i3.FileMode.read}) =>
      (super.noSuchMethod(
            Invocation.method(#openSync, [], {#mode: mode}),
            returnValue: _FakeRandomAccessFile_11(
              this,
              Invocation.method(#openSync, [], {#mode: mode}),
            ),
          )
          as _i3.RandomAccessFile);

  @override
  _i6.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(
            Invocation.method(#openRead, [start, end]),
            returnValue: _i6.Stream<List<int>>.empty(),
          )
          as _i6.Stream<List<int>>);

  @override
  _i3.IOSink openWrite({
    _i3.FileMode? mode = _i3.FileMode.write,
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#openWrite, [], {
              #mode: mode,
              #encoding: encoding,
            }),
            returnValue: _FakeIOSink_12(
              this,
              Invocation.method(#openWrite, [], {
                #mode: mode,
                #encoding: encoding,
              }),
            ),
          )
          as _i3.IOSink);

  @override
  _i6.Future<_i16.Uint8List> readAsBytes() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, []),
            returnValue: _i6.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
          )
          as _i6.Future<_i16.Uint8List>);

  @override
  _i16.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytesSync, []),
            returnValue: _i16.Uint8List(0),
          )
          as _i16.Uint8List);

  @override
  _i6.Future<String> readAsString({
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [], {#encoding: encoding}),
            returnValue: _i6.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [], {#encoding: encoding}),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  String readAsStringSync({_i15.Encoding? encoding = const _i15.Utf8Codec()}) =>
      (super.noSuchMethod(
            Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            ),
          )
          as String);

  @override
  _i6.Future<List<String>> readAsLines({
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLines, [], {#encoding: encoding}),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  List<String> readAsLinesSync({
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i6.Future<_i3.File> writeAsBytes(
    List<int>? bytes, {
    _i3.FileMode? mode = _i3.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsBytes,
              [bytes],
              {#mode: mode, #flush: flush},
            ),
            returnValue: _i6.Future<_i3.File>.value(
              _FakeFile_9(
                this,
                Invocation.method(
                  #writeAsBytes,
                  [bytes],
                  {#mode: mode, #flush: flush},
                ),
              ),
            ),
          )
          as _i6.Future<_i3.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i3.FileMode? mode = _i3.FileMode.write,
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(#writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i3.File> writeAsString(
    String? contents, {
    _i3.FileMode? mode = _i3.FileMode.write,
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsString,
              [contents],
              {#mode: mode, #encoding: encoding, #flush: flush},
            ),
            returnValue: _i6.Future<_i3.File>.value(
              _FakeFile_9(
                this,
                Invocation.method(
                  #writeAsString,
                  [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush},
                ),
              ),
            ),
          )
          as _i6.Future<_i3.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i3.FileMode? mode = _i3.FileMode.write,
    _i15.Encoding? encoding = const _i15.Utf8Codec(),
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #writeAsStringSync,
      [contents],
      {#mode: mode, #encoding: encoding, #flush: flush},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i6.Future<String>.value(
              _i14.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i6.Future<_i3.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i6.Future<_i3.FileStat>.value(
              _FakeFileStat_8(this, Invocation.method(#stat, [])),
            ),
          )
          as _i6.Future<_i3.FileStat>);

  @override
  _i3.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_8(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i3.FileStat);

  @override
  _i6.Stream<_i3.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i6.Stream<_i3.FileSystemEvent>.empty(),
          )
          as _i6.Stream<_i3.FileSystemEvent>);
}
