// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/noaa/chart_catalog_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i6;
import 'package:navtool/core/logging/app_logger.dart' as _i5;
import 'package:navtool/core/services/cache_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheService extends _i1.Mock implements _i2.CacheService {
  MockCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> store(
    String? key,
    _i4.Uint8List? data, {
    Duration? maxAge,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#store, [key, data], {#maxAge: maxAge}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.Uint8List?> get(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key]),
            returnValue: _i3.Future<_i4.Uint8List?>.value(),
          )
          as _i3.Future<_i4.Uint8List?>);

  @override
  _i3.Future<bool> exists(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#exists, [key]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> getSize() =>
      (super.noSuchMethod(
            Invocation.method(#getSize, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> cleanupExpired() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupExpired, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<Map<String, dynamic>> getStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getStatistics, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<bool> isExpired(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isExpired, [key]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> setExpiration(String? key, DateTime? expiration) =>
      (super.noSuchMethod(
            Invocation.method(#setExpiration, [key, expiration]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void validateKey(String? key) => super.noSuchMethod(
    Invocation.method(#validateKey, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void storeInMemory(String? key, _i4.Uint8List? data) => super.noSuchMethod(
    Invocation.method(#storeInMemory, [key, data]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Uint8List? getFromMemory(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFromMemory, [key]))
          as _i4.Uint8List?);

  @override
  void removeFromMemory(String? key) => super.noSuchMethod(
    Invocation.method(#removeFromMemory, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void clearMemoryCache() => super.noSuchMethod(
    Invocation.method(#clearMemoryCache, []),
    returnValueForMissingStub: null,
  );

  @override
  int getMemoryCacheSize() =>
      (super.noSuchMethod(
            Invocation.method(#getMemoryCacheSize, []),
            returnValue: 0,
          )
          as int);

  @override
  void setMemoryCacheLimit(int? maxEntries) => super.noSuchMethod(
    Invocation.method(#setMemoryCacheLimit, [maxEntries]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i5.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i6.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}
