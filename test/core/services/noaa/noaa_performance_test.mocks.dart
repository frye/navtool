// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/noaa/noaa_performance_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:navtool/core/error/app_error.dart' as _i10;
import 'package:navtool/core/logging/app_logger.dart' as _i9;
import 'package:navtool/core/models/chart.dart' as _i5;
import 'package:navtool/core/models/geographic_bounds.dart' as _i6;
import 'package:navtool/core/services/noaa/chart_catalog_service.dart' as _i3;
import 'package:navtool/core/services/noaa/noaa_api_client.dart' as _i7;
import 'package:navtool/core/services/noaa/state_region_mapping_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValidationResult_0 extends _i1.SmartFake
    implements _i2.ValidationResult {
  _FakeValidationResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStateCoverageInfo_1 extends _i1.SmartFake
    implements _i2.StateCoverageInfo {
  _FakeStateCoverageInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ChartCatalogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChartCatalogService extends _i1.Mock
    implements _i3.ChartCatalogService {
  MockChartCatalogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Chart?> getCachedChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedChart, [chartId]),
            returnValue: _i4.Future<_i5.Chart?>.value(),
          )
          as _i4.Future<_i5.Chart?>);

  @override
  _i4.Future<void> cacheChart(_i5.Chart? chart) =>
      (super.noSuchMethod(
            Invocation.method(#cacheChart, [chart]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i5.Chart?> getChartById(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#getChartById, [chartId]),
            returnValue: _i4.Future<_i5.Chart?>.value(),
          )
          as _i4.Future<_i5.Chart?>);

  @override
  _i4.Future<List<_i5.Chart>> searchCharts(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchCharts, [query]),
            returnValue: _i4.Future<List<_i5.Chart>>.value(<_i5.Chart>[]),
          )
          as _i4.Future<List<_i5.Chart>>);

  @override
  _i4.Future<List<_i5.Chart>> searchChartsWithFilters(
    String? query,
    Map<String, String>? filters,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchChartsWithFilters, [query, filters]),
            returnValue: _i4.Future<List<_i5.Chart>>.value(<_i5.Chart>[]),
          )
          as _i4.Future<List<_i5.Chart>>);

  @override
  _i4.Future<bool> refreshCatalog({bool? force = false}) =>
      (super.noSuchMethod(
            Invocation.method(#refreshCatalog, [], {#force: force}),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> ensureCatalogBootstrapped() =>
      (super.noSuchMethod(
            Invocation.method(#ensureCatalogBootstrapped, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> getCachedChartCount() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedChartCount, []),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}

/// A class which mocks [StateRegionMappingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStateRegionMappingService extends _i1.Mock
    implements _i2.StateRegionMappingService {
  MockStateRegionMappingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<String>> getChartCellsForState(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getChartCellsForState, [stateName]),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<_i6.GeographicBounds?> getStateBounds(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getStateBounds, [stateName]),
            returnValue: _i4.Future<_i6.GeographicBounds?>.value(),
          )
          as _i4.Future<_i6.GeographicBounds?>);

  @override
  _i4.Future<List<String>> getSupportedStates() =>
      (super.noSuchMethod(
            Invocation.method(#getSupportedStates, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<String?> getStateFromCoordinates(
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getStateFromCoordinates, [latitude, longitude]),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> updateStateCellMapping(
    String? stateName,
    List<String>? mapping,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateStateCellMapping, [stateName, mapping]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearStateMappings() =>
      (super.noSuchMethod(
            Invocation.method(#clearStateMappings, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.MarineRegion>> getMarineRegions(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getMarineRegions, [stateName]),
            returnValue: _i4.Future<List<_i2.MarineRegion>>.value(
              <_i2.MarineRegion>[],
            ),
          )
          as _i4.Future<List<_i2.MarineRegion>>);

  @override
  _i4.Future<List<String>> getChartCellsForRegion(
    String? stateName,
    String? regionName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getChartCellsForRegion, [stateName, regionName]),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<_i2.ValidationResult> validateStateRegionMapping(
    String? stateName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateStateRegionMapping, [stateName]),
            returnValue: _i4.Future<_i2.ValidationResult>.value(
              _FakeValidationResult_0(
                this,
                Invocation.method(#validateStateRegionMapping, [stateName]),
              ),
            ),
          )
          as _i4.Future<_i2.ValidationResult>);

  @override
  _i4.Future<_i2.StateCoverageInfo> getStateCoverageInfo(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getStateCoverageInfo, [stateName]),
            returnValue: _i4.Future<_i2.StateCoverageInfo>.value(
              _FakeStateCoverageInfo_1(
                this,
                Invocation.method(#getStateCoverageInfo, [stateName]),
              ),
            ),
          )
          as _i4.Future<_i2.StateCoverageInfo>);
}

/// A class which mocks [NoaaApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoaaApiClient extends _i1.Mock implements _i7.NoaaApiClient {
  MockNoaaApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> fetchChartCatalog({Map<String, String>? filters}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchChartCatalog, [], {#filters: filters}),
            returnValue: _i4.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#fetchChartCatalog, [], {#filters: filters}),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i5.Chart?> getChartMetadata(String? cellName) =>
      (super.noSuchMethod(
            Invocation.method(#getChartMetadata, [cellName]),
            returnValue: _i4.Future<_i5.Chart?>.value(),
          )
          as _i4.Future<_i5.Chart?>);

  @override
  _i4.Future<bool> isChartAvailable(String? cellName) =>
      (super.noSuchMethod(
            Invocation.method(#isChartAvailable, [cellName]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> downloadChart(
    String? cellName,
    String? savePath, {
    _i7.NoaaProgressCallback? onProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadChart,
              [cellName, savePath],
              {#onProgress: onProgress},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<double> getDownloadProgress(String? cellName) =>
      (super.noSuchMethod(
            Invocation.method(#getDownloadProgress, [cellName]),
            returnValue: _i4.Stream<double>.empty(),
          )
          as _i4.Stream<double>);

  @override
  _i4.Future<void> cancelDownload(String? cellName) =>
      (super.noSuchMethod(
            Invocation.method(#cancelDownload, [cellName]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i9.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i10.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}
