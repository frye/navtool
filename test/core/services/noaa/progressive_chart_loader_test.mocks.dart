// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/noaa/progressive_chart_loader_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:navtool/core/error/app_error.dart' as _i7;
import 'package:navtool/core/logging/app_logger.dart' as _i6;
import 'package:navtool/core/models/chart.dart' as _i5;
import 'package:navtool/core/services/noaa/noaa_api_client.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NoaaApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoaaApiClient extends _i1.Mock implements _i2.NoaaApiClient {
  MockNoaaApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> fetchChartCatalog({Map<String, String>? filters}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchChartCatalog, [], {#filters: filters}),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#fetchChartCatalog, [], {#filters: filters}),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<_i5.Chart?> getChartMetadata(String? cellName) =>
      (super.noSuchMethod(
            Invocation.method(#getChartMetadata, [cellName]),
            returnValue: _i3.Future<_i5.Chart?>.value(),
          )
          as _i3.Future<_i5.Chart?>);

  @override
  _i3.Future<bool> isChartAvailable(String? cellName) =>
      (super.noSuchMethod(
            Invocation.method(#isChartAvailable, [cellName]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> downloadChart(
    String? cellName,
    String? savePath, {
    _i2.NoaaProgressCallback? onProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadChart,
              [cellName, savePath],
              {#onProgress: onProgress},
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<double> getDownloadProgress(String? cellName) =>
      (super.noSuchMethod(
            Invocation.method(#getDownloadProgress, [cellName]),
            returnValue: _i3.Stream<double>.empty(),
          )
          as _i3.Stream<double>);

  @override
  _i3.Future<void> cancelDownload(String? cellName) =>
      (super.noSuchMethod(
            Invocation.method(#cancelDownload, [cellName]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i6.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i7.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}
