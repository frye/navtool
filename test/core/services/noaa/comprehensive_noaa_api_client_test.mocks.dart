// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/noaa/comprehensive_noaa_api_client_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:collection' as _i3;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i8;
import 'package:navtool/core/logging/app_logger.dart' as _i7;
import 'package:navtool/core/services/http_client_service.dart' as _i5;
import 'package:navtool/core/utils/rate_limiter.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_1<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueue_3<E> extends _i1.SmartFake implements _i3.Queue<E> {
  _FakeQueue_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRateLimitStatus_4 extends _i1.SmartFake
    implements _i4.RateLimitStatus {
  _FakeRateLimitStatus_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HttpClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientService extends _i1.Mock implements _i5.HttpClientService {
  MockHttpClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeDio_0(this, Invocation.getter(#client)),
          )
          as _i2.Dio);

  @override
  void configureNoaaEndpoints() => super.noSuchMethod(
    Invocation.method(#configureNoaaEndpoints, []),
    returnValueForMissingStub: null,
  );

  @override
  void configureCertificatePinning() => super.noSuchMethod(
    Invocation.method(#configureCertificatePinning, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> downloadFile(
    String? url,
    String? savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    Map<String, dynamic>? queryParameters,
    int? resumeFrom,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadFile,
              [url, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #queryParameters: queryParameters,
                #resumeFrom: resumeFrom,
              },
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i2.Response<dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_1<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> post(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_1<dynamic>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i7.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i8.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [RateLimiter].
///
/// See the documentation for Mockito's code generation for more information.
class MockRateLimiter extends _i1.Mock implements _i4.RateLimiter {
  MockRateLimiter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get requestsPerSecond =>
      (super.noSuchMethod(Invocation.getter(#requestsPerSecond), returnValue: 0)
          as int);

  @override
  Duration get windowSize =>
      (super.noSuchMethod(
            Invocation.getter(#windowSize),
            returnValue: _FakeDuration_2(this, Invocation.getter(#windowSize)),
          )
          as Duration);

  @override
  _i3.Queue<DateTime> get requestTimes =>
      (super.noSuchMethod(
            Invocation.getter(#requestTimes),
            returnValue: _FakeQueue_3<DateTime>(
              this,
              Invocation.getter(#requestTimes),
            ),
          )
          as _i3.Queue<DateTime>);

  @override
  _i6.Future<void> acquire() =>
      (super.noSuchMethod(
            Invocation.method(#acquire, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  bool canMakeRequest() =>
      (super.noSuchMethod(
            Invocation.method(#canMakeRequest, []),
            returnValue: false,
          )
          as bool);

  @override
  Duration getWaitTime() =>
      (super.noSuchMethod(
            Invocation.method(#getWaitTime, []),
            returnValue: _FakeDuration_2(
              this,
              Invocation.method(#getWaitTime, []),
            ),
          )
          as Duration);

  @override
  _i4.RateLimitStatus getStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getStatus, []),
            returnValue: _FakeRateLimitStatus_4(
              this,
              Invocation.method(#getStatus, []),
            ),
          )
          as _i4.RateLimitStatus);

  @override
  void cleanupOldRequests() => super.noSuchMethod(
    Invocation.method(#cleanupOldRequests, []),
    returnValueForMissingStub: null,
  );
}
