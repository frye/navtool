// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/download_service_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i3;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:navtool/core/error/app_error.dart' as _i13;
import 'package:navtool/core/error/error_handler.dart' as _i5;
import 'package:navtool/core/logging/app_logger.dart' as _i4;
import 'package:navtool/core/models/chart.dart' as _i9;
import 'package:navtool/core/models/geographic_bounds.dart' as _i12;
import 'package:navtool/core/models/route.dart' as _i10;
import 'package:navtool/core/models/waypoint.dart' as _i11;
import 'package:navtool/core/services/http_client_service.dart' as _i7;
import 'package:navtool/core/services/storage_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResponse_1<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_2 extends _i1.SmartFake implements _i3.Directory {
  _FakeDirectory_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppLogger_3 extends _i1.SmartFake implements _i4.AppLogger {
  _FakeAppLogger_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeErrorRecoveryStrategy_4 extends _i1.SmartFake
    implements _i5.ErrorRecoveryStrategy {
  _FakeErrorRecoveryStrategy_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_5<T1> extends _i1.SmartFake implements _i6.Future<T1> {
  _FakeFuture_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HttpClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientService extends _i1.Mock implements _i7.HttpClientService {
  MockHttpClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeDio_0(this, Invocation.getter(#client)),
          )
          as _i2.Dio);

  @override
  void configureNoaaEndpoints() => super.noSuchMethod(
    Invocation.method(#configureNoaaEndpoints, []),
    returnValueForMissingStub: null,
  );

  @override
  void configureCertificatePinning() => super.noSuchMethod(
    Invocation.method(#configureCertificatePinning, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> downloadFile(
    String? url,
    String? savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    Map<String, dynamic>? queryParameters,
    int? resumeFrom,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadFile,
              [url, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #queryParameters: queryParameters,
                #resumeFrom: resumeFrom,
              },
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i2.Response<dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_1<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> post(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_1<dynamic>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i8.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> storeChart(_i9.Chart? chart, List<int>? data) =>
      (super.noSuchMethod(
            Invocation.method(#storeChart, [chart, data]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<int>?> loadChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#loadChart, [chartId]),
            returnValue: _i6.Future<List<int>?>.value(),
          )
          as _i6.Future<List<int>?>);

  @override
  _i6.Future<void> deleteChart(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteChart, [chartId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, dynamic>> getStorageInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageInfo, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<void> cleanupOldData() =>
      (super.noSuchMethod(
            Invocation.method(#cleanupOldData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<int> getStorageUsage() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageUsage, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<_i3.Directory> getChartsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getChartsDirectory, []),
            returnValue: _i6.Future<_i3.Directory>.value(
              _FakeDirectory_2(
                this,
                Invocation.method(#getChartsDirectory, []),
              ),
            ),
          )
          as _i6.Future<_i3.Directory>);

  @override
  _i6.Future<void> storeRoute(_i10.NavigationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#storeRoute, [route]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i10.NavigationRoute?> loadRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#loadRoute, [routeId]),
            returnValue: _i6.Future<_i10.NavigationRoute?>.value(),
          )
          as _i6.Future<_i10.NavigationRoute?>);

  @override
  _i6.Future<void> deleteRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoute, [routeId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i10.NavigationRoute>> getAllRoutes() =>
      (super.noSuchMethod(
            Invocation.method(#getAllRoutes, []),
            returnValue: _i6.Future<List<_i10.NavigationRoute>>.value(
              <_i10.NavigationRoute>[],
            ),
          )
          as _i6.Future<List<_i10.NavigationRoute>>);

  @override
  _i6.Future<void> storeWaypoint(_i11.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#storeWaypoint, [waypoint]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i11.Waypoint?> loadWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#loadWaypoint, [waypointId]),
            returnValue: _i6.Future<_i11.Waypoint?>.value(),
          )
          as _i6.Future<_i11.Waypoint?>);

  @override
  _i6.Future<void> updateWaypoint(_i11.Waypoint? waypoint) =>
      (super.noSuchMethod(
            Invocation.method(#updateWaypoint, [waypoint]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteWaypoint(String? waypointId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWaypoint, [waypointId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i11.Waypoint>> getAllWaypoints() =>
      (super.noSuchMethod(
            Invocation.method(#getAllWaypoints, []),
            returnValue: _i6.Future<List<_i11.Waypoint>>.value(
              <_i11.Waypoint>[],
            ),
          )
          as _i6.Future<List<_i11.Waypoint>>);

  @override
  _i6.Future<void> storeStateCellMapping(
    String? stateName,
    List<String>? chartCells,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#storeStateCellMapping, [stateName, chartCells]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<String>?> getStateCellMapping(String? stateName) =>
      (super.noSuchMethod(
            Invocation.method(#getStateCellMapping, [stateName]),
            returnValue: _i6.Future<List<String>?>.value(),
          )
          as _i6.Future<List<String>?>);

  @override
  _i6.Future<void> clearAllStateCellMappings() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllStateCellMappings, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i9.Chart>> getChartsInBounds(
    _i12.GeographicBounds? bounds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getChartsInBounds, [bounds]),
            returnValue: _i6.Future<List<_i9.Chart>>.value(<_i9.Chart>[]),
          )
          as _i6.Future<List<_i9.Chart>>);

  @override
  _i6.Future<int> countChartsWithInvalidBounds() =>
      (super.noSuchMethod(
            Invocation.method(#countChartsWithInvalidBounds, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<int> clearChartsWithInvalidBounds() =>
      (super.noSuchMethod(
            Invocation.method(#clearChartsWithInvalidBounds, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i4.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i13.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ErrorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorHandler extends _i1.Mock implements _i5.ErrorHandler {
  MockErrorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AppLogger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeAppLogger_3(this, Invocation.getter(#logger)),
          )
          as _i4.AppLogger);

  @override
  void handleError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#handleError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  bool shouldRetry(_i13.AppError? error) =>
      (super.noSuchMethod(
            Invocation.method(#shouldRetry, [error]),
            returnValue: false,
          )
          as bool);

  @override
  String getUserMessage(_i13.AppError? error) =>
      (super.noSuchMethod(
            Invocation.method(#getUserMessage, [error]),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#getUserMessage, [error]),
            ),
          )
          as String);

  @override
  _i5.ErrorRecoveryStrategy getRecoveryStrategy(_i13.AppError? error) =>
      (super.noSuchMethod(
            Invocation.method(#getRecoveryStrategy, [error]),
            returnValue: _FakeErrorRecoveryStrategy_4(
              this,
              Invocation.method(#getRecoveryStrategy, [error]),
            ),
          )
          as _i5.ErrorRecoveryStrategy);

  @override
  _i6.Future<T> handleWithRetry<T>(
    _i6.Future<T> Function()? operation, {
    int? maxRetries = 3,
    Duration? delay = const Duration(seconds: 1),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleWithRetry,
              [operation],
              {#maxRetries: maxRetries, #delay: delay},
            ),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #handleWithRetry,
                      [operation],
                      {#maxRetries: maxRetries, #delay: delay},
                    ),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_5<T>(
                  this,
                  Invocation.method(
                    #handleWithRetry,
                    [operation],
                    {#maxRetries: maxRetries, #delay: delay},
                  ),
                ),
          )
          as _i6.Future<T>);
}
