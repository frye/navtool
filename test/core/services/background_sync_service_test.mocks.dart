// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/core/services/background_sync_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i4;
import 'package:navtool/core/logging/app_logger.dart' as _i3;
import 'package:navtool/core/services/background_task_service.dart' as _i6;
import 'package:navtool/core/services/noaa/progressive_chart_loader.dart'
    as _i7;
import 'package:navtool/core/utils/network_resilience.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkResilienceConfig_0 extends _i1.SmartFake
    implements _i2.NetworkResilienceConfig {
  _FakeNetworkResilienceConfig_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMarineNetworkConditions_2 extends _i1.SmartFake
    implements _i2.MarineNetworkConditions {
  _FakeMarineNetworkConditions_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMarineTimeoutRecommendations_3 extends _i1.SmartFake
    implements _i2.MarineTimeoutRecommendations {
  _FakeMarineTimeoutRecommendations_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeWeatherImpactAssessment_4 extends _i1.SmartFake
    implements _i2.WeatherImpactAssessment {
  _FakeWeatherImpactAssessment_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDegradationPlan_5 extends _i1.SmartFake
    implements _i2.DegradationPlan {
  _FakeDegradationPlan_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i3.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i4.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NetworkResilience].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkResilience extends _i1.Mock implements _i2.NetworkResilience {
  MockNetworkResilience() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NetworkResilienceConfig get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeNetworkResilienceConfig_0(
              this,
              Invocation.getter(#config),
            ),
          )
          as _i2.NetworkResilienceConfig);

  @override
  _i5.Stream<_i2.NetworkStatus> get networkStatusStream =>
      (super.noSuchMethod(
            Invocation.getter(#networkStatusStream),
            returnValue: _i5.Stream<_i2.NetworkStatus>.empty(),
          )
          as _i5.Stream<_i2.NetworkStatus>);

  @override
  _i5.Stream<_i2.NetworkMonitoringEvent> get monitoringEvents =>
      (super.noSuchMethod(
            Invocation.getter(#monitoringEvents),
            returnValue: _i5.Stream<_i2.NetworkMonitoringEvent>.empty(),
          )
          as _i5.Stream<_i2.NetworkMonitoringEvent>);

  @override
  _i5.Stream<_i2.ConnectionInterruption> get connectionInterruptions =>
      (super.noSuchMethod(
            Invocation.getter(#connectionInterruptions),
            returnValue: _i5.Stream<_i2.ConnectionInterruption>.empty(),
          )
          as _i5.Stream<_i2.ConnectionInterruption>);

  @override
  bool get isMonitoring =>
      (super.noSuchMethod(Invocation.getter(#isMonitoring), returnValue: false)
          as bool);

  @override
  set config(_i2.NetworkResilienceConfig? _config) => super.noSuchMethod(
    Invocation.setter(#config, _config),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<bool> isOnline() =>
      (super.noSuchMethod(
            Invocation.method(#isOnline, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i2.NetworkStatus> getNetworkStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getNetworkStatus, []),
            returnValue: _i5.Future<_i2.NetworkStatus>.value(
              _i2.NetworkStatus.connected,
            ),
          )
          as _i5.Future<_i2.NetworkStatus>);

  @override
  _i5.Future<void> checkNetworkStatus() =>
      (super.noSuchMethod(
            Invocation.method(#checkNetworkStatus, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> waitForConnection({
    Duration? timeout,
    bool? requireOnline = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#waitForConnection, [], {
              #timeout: timeout,
              #requireOnline: requireOnline,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.ConnectionQuality> assessConnectionQuality() =>
      (super.noSuchMethod(
            Invocation.method(#assessConnectionQuality, []),
            returnValue: _i5.Future<_i2.ConnectionQuality>.value(
              _i2.ConnectionQuality.excellent,
            ),
          )
          as _i5.Future<_i2.ConnectionQuality>);

  @override
  _i5.Future<double> measureConnectionSpeed() =>
      (super.noSuchMethod(
            Invocation.method(#measureConnectionSpeed, []),
            returnValue: _i5.Future<double>.value(0.0),
          )
          as _i5.Future<double>);

  @override
  _i5.Future<Duration> measureLatency({String? testHost}) =>
      (super.noSuchMethod(
            Invocation.method(#measureLatency, [], {#testHost: testHost}),
            returnValue: _i5.Future<Duration>.value(
              _FakeDuration_1(
                this,
                Invocation.method(#measureLatency, [], {#testHost: testHost}),
              ),
            ),
          )
          as _i5.Future<Duration>);

  @override
  _i5.Future<_i2.ConnectionType> getConnectionType() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectionType, []),
            returnValue: _i5.Future<_i2.ConnectionType>.value(
              _i2.ConnectionType.ethernet,
            ),
          )
          as _i5.Future<_i2.ConnectionType>);

  @override
  _i5.Future<_i2.ConnectionStability> assessConnectionStability() =>
      (super.noSuchMethod(
            Invocation.method(#assessConnectionStability, []),
            returnValue: _i5.Future<_i2.ConnectionStability>.value(
              _i2.ConnectionStability.veryStable,
            ),
          )
          as _i5.Future<_i2.ConnectionStability>);

  @override
  _i5.Future<bool> isSatelliteConnection() =>
      (super.noSuchMethod(
            Invocation.method(#isSatelliteConnection, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i2.MarineNetworkConditions> assessMarineNetworkConditions() =>
      (super.noSuchMethod(
            Invocation.method(#assessMarineNetworkConditions, []),
            returnValue: _i5.Future<_i2.MarineNetworkConditions>.value(
              _FakeMarineNetworkConditions_2(
                this,
                Invocation.method(#assessMarineNetworkConditions, []),
              ),
            ),
          )
          as _i5.Future<_i2.MarineNetworkConditions>);

  @override
  _i5.Future<_i2.MarineTimeoutRecommendations>
  getMarineTimeoutRecommendations() =>
      (super.noSuchMethod(
            Invocation.method(#getMarineTimeoutRecommendations, []),
            returnValue: _i5.Future<_i2.MarineTimeoutRecommendations>.value(
              _FakeMarineTimeoutRecommendations_3(
                this,
                Invocation.method(#getMarineTimeoutRecommendations, []),
              ),
            ),
          )
          as _i5.Future<_i2.MarineTimeoutRecommendations>);

  @override
  _i5.Future<_i2.WeatherImpactAssessment> assessWeatherImpactOnConnection() =>
      (super.noSuchMethod(
            Invocation.method(#assessWeatherImpactOnConnection, []),
            returnValue: _i5.Future<_i2.WeatherImpactAssessment>.value(
              _FakeWeatherImpactAssessment_4(
                this,
                Invocation.method(#assessWeatherImpactOnConnection, []),
              ),
            ),
          )
          as _i5.Future<_i2.WeatherImpactAssessment>);

  @override
  bool supportsOfflineMode() =>
      (super.noSuchMethod(
            Invocation.method(#supportsOfflineMode, []),
            returnValue: false,
          )
          as bool);

  @override
  _i5.Future<List<_i2.OfflineFallbackStrategy>>
  getOfflineFallbackStrategies() =>
      (super.noSuchMethod(
            Invocation.method(#getOfflineFallbackStrategies, []),
            returnValue: _i5.Future<List<_i2.OfflineFallbackStrategy>>.value(
              <_i2.OfflineFallbackStrategy>[],
            ),
          )
          as _i5.Future<List<_i2.OfflineFallbackStrategy>>);

  @override
  _i5.Future<_i2.DegradationPlan> createDegradationPlan(
    _i2.ConnectionQuality? quality,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createDegradationPlan, [quality]),
            returnValue: _i5.Future<_i2.DegradationPlan>.value(
              _FakeDegradationPlan_5(
                this,
                Invocation.method(#createDegradationPlan, [quality]),
              ),
            ),
          )
          as _i5.Future<_i2.DegradationPlan>);

  @override
  _i5.Future<void> startMonitoring({Duration? interval}) =>
      (super.noSuchMethod(
            Invocation.method(#startMonitoring, [], {#interval: interval}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopMonitoring() =>
      (super.noSuchMethod(
            Invocation.method(#stopMonitoring, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateConfiguration(
    _i2.NetworkResilienceConfig? newConfig,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateConfiguration, [newConfig]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [BackgroundTaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackgroundTaskService extends _i1.Mock
    implements _i6.BackgroundTaskService {
  MockBackgroundTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize({bool? isDebugMode = false}) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [], {#isDebugMode: isDebugMode}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> registerChartDownloadTask() =>
      (super.noSuchMethod(
            Invocation.method(#registerChartDownloadTask, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> scheduleChartDownload(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleChartDownload, [chartId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancelChartDownload(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelChartDownload, [chartId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> registerGpsTrackingTask() =>
      (super.noSuchMethod(
            Invocation.method(#registerGpsTrackingTask, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> startRouteRecording(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#startRouteRecording, [routeId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopRouteRecording(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#stopRouteRecording, [routeId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> registerWeatherUpdateTask() =>
      (super.noSuchMethod(
            Invocation.method(#registerWeatherUpdateTask, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancelAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAllTasks, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  int getActiveTaskCount() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveTaskCount, []),
            returnValue: 0,
          )
          as int);
}

/// A class which mocks [ProgressiveChartLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockProgressiveChartLoader extends _i1.Mock
    implements _i7.ProgressiveChartLoader {
  MockProgressiveChartLoader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i7.ChartLoadProgress> loadChartsWithProgress({
    String? region,
    int? chunkSize = 25,
    String? loadId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadChartsWithProgress, [], {
              #region: region,
              #chunkSize: chunkSize,
              #loadId: loadId,
            }),
            returnValue: _i5.Stream<_i7.ChartLoadProgress>.empty(),
          )
          as _i5.Stream<_i7.ChartLoadProgress>);

  @override
  _i5.Future<void> cancelLoading(String? loadId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelLoading, [loadId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  bool isLoadingActive(String? loadId) =>
      (super.noSuchMethod(
            Invocation.method(#isLoadingActive, [loadId]),
            returnValue: false,
          )
          as bool);

  @override
  List<String> getActiveLoadIds() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveLoadIds, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
