// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/features/charts/gps_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i8;
import 'package:navtool/core/logging/app_logger.dart' as _i7;
import 'package:navtool/core/models/gps_position.dart' as _i6;
import 'package:navtool/core/models/gps_signal_quality.dart' as _i2;
import 'package:navtool/core/models/position_history.dart' as _i3;
import 'package:navtool/core/services/gps_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGpsSignalQuality_0 extends _i1.SmartFake
    implements _i2.GpsSignalQuality {
  _FakeGpsSignalQuality_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePositionHistory_1 extends _i1.SmartFake
    implements _i3.PositionHistory {
  _FakePositionHistory_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccuracyStatistics_2 extends _i1.SmartFake
    implements _i3.AccuracyStatistics {
  _FakeAccuracyStatistics_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovementState_3 extends _i1.SmartFake implements _i3.MovementState {
  _FakeMovementState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePositionFreshness_4 extends _i1.SmartFake
    implements _i3.PositionFreshness {
  _FakePositionFreshness_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GpsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGpsService extends _i1.Mock implements _i4.GpsService {
  MockGpsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> startLocationTracking() =>
      (super.noSuchMethod(
            Invocation.method(#startLocationTracking, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopLocationTracking() =>
      (super.noSuchMethod(
            Invocation.method(#stopLocationTracking, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i6.GpsPosition?> getCurrentPosition() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentPosition, []),
            returnValue: _i5.Future<_i6.GpsPosition?>.value(),
          )
          as _i5.Future<_i6.GpsPosition?>);

  @override
  _i5.Future<_i6.GpsPosition?> getCurrentPositionWithFallback() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentPositionWithFallback, []),
            returnValue: _i5.Future<_i6.GpsPosition?>.value(),
          )
          as _i5.Future<_i6.GpsPosition?>);

  @override
  _i5.Stream<_i6.GpsPosition> getLocationStream() =>
      (super.noSuchMethod(
            Invocation.method(#getLocationStream, []),
            returnValue: _i5.Stream<_i6.GpsPosition>.empty(),
          )
          as _i5.Stream<_i6.GpsPosition>);

  @override
  _i5.Future<bool> requestLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestLocationPermission, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> checkLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationPermission, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> isLocationEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isLocationEnabled, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i2.GpsSignalQuality> assessSignalQuality(
    _i6.GpsPosition? position,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#assessSignalQuality, [position]),
            returnValue: _i5.Future<_i2.GpsSignalQuality>.value(
              _FakeGpsSignalQuality_0(
                this,
                Invocation.method(#assessSignalQuality, [position]),
              ),
            ),
          )
          as _i5.Future<_i2.GpsSignalQuality>);

  @override
  _i5.Future<void> logPosition(_i6.GpsPosition? position) =>
      (super.noSuchMethod(
            Invocation.method(#logPosition, [position]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.PositionHistory> getPositionHistory(Duration? timeWindow) =>
      (super.noSuchMethod(
            Invocation.method(#getPositionHistory, [timeWindow]),
            returnValue: _i5.Future<_i3.PositionHistory>.value(
              _FakePositionHistory_1(
                this,
                Invocation.method(#getPositionHistory, [timeWindow]),
              ),
            ),
          )
          as _i5.Future<_i3.PositionHistory>);

  @override
  _i5.Future<List<_i2.GpsSignalQuality>> getSignalQualityTrend(
    Duration? timeWindow,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSignalQualityTrend, [timeWindow]),
            returnValue: _i5.Future<List<_i2.GpsSignalQuality>>.value(
              <_i2.GpsSignalQuality>[],
            ),
          )
          as _i5.Future<List<_i2.GpsSignalQuality>>);

  @override
  _i5.Future<void> clearPositionHistory() =>
      (super.noSuchMethod(
            Invocation.method(#clearPositionHistory, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.AccuracyStatistics> getAccuracyStatistics(
    Duration? timeWindow,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAccuracyStatistics, [timeWindow]),
            returnValue: _i5.Future<_i3.AccuracyStatistics>.value(
              _FakeAccuracyStatistics_2(
                this,
                Invocation.method(#getAccuracyStatistics, [timeWindow]),
              ),
            ),
          )
          as _i5.Future<_i3.AccuracyStatistics>);

  @override
  _i5.Future<_i3.MovementState> getMovementState(Duration? analysisWindow) =>
      (super.noSuchMethod(
            Invocation.method(#getMovementState, [analysisWindow]),
            returnValue: _i5.Future<_i3.MovementState>.value(
              _FakeMovementState_3(
                this,
                Invocation.method(#getMovementState, [analysisWindow]),
              ),
            ),
          )
          as _i5.Future<_i3.MovementState>);

  @override
  _i5.Future<_i3.PositionFreshness> getPositionFreshness() =>
      (super.noSuchMethod(
            Invocation.method(#getPositionFreshness, []),
            returnValue: _i5.Future<_i3.PositionFreshness>.value(
              _FakePositionFreshness_4(
                this,
                Invocation.method(#getPositionFreshness, []),
              ),
            ),
          )
          as _i5.Future<_i3.PositionFreshness>);

  @override
  _i5.Future<List<_i6.GpsPosition>> filterForMarineAccuracy(
    List<_i6.GpsPosition>? positions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#filterForMarineAccuracy, [positions]),
            returnValue: _i5.Future<List<_i6.GpsPosition>>.value(
              <_i6.GpsPosition>[],
            ),
          )
          as _i5.Future<List<_i6.GpsPosition>>);

  @override
  _i5.Future<_i3.CourseOverGround?> calculateCourseOverGround(
    Duration? timeWindow,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#calculateCourseOverGround, [timeWindow]),
            returnValue: _i5.Future<_i3.CourseOverGround?>.value(),
          )
          as _i5.Future<_i3.CourseOverGround?>);

  @override
  _i5.Future<_i3.SpeedOverGround?> calculateSpeedOverGround(
    Duration? timeWindow,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#calculateSpeedOverGround, [timeWindow]),
            returnValue: _i5.Future<_i3.SpeedOverGround?>.value(),
          )
          as _i5.Future<_i3.SpeedOverGround?>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i7.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i8.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}
