// Mocks generated by Mockito 5.4.6 from annotations
// in navtool/test/features/charts/chart_browser_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/error/app_error.dart' as _i6;
import 'package:navtool/core/logging/app_logger.dart' as _i5;
import 'package:navtool/core/models/chart.dart' as _i4;
import 'package:navtool/core/services/noaa/noaa_chart_discovery_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NoaaChartDiscoveryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoaaChartDiscoveryService extends _i1.Mock
    implements _i2.NoaaChartDiscoveryService {
  MockNoaaChartDiscoveryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Chart>> discoverChartsByState(String? state) =>
      (super.noSuchMethod(
            Invocation.method(#discoverChartsByState, [state]),
            returnValue: _i3.Future<List<_i4.Chart>>.value(<_i4.Chart>[]),
          )
          as _i3.Future<List<_i4.Chart>>);

  @override
  _i3.Future<List<_i4.Chart>> searchCharts(
    String? query, {
    Map<String, String>? filters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchCharts, [query], {#filters: filters}),
            returnValue: _i3.Future<List<_i4.Chart>>.value(<_i4.Chart>[]),
          )
          as _i3.Future<List<_i4.Chart>>);

  @override
  _i3.Future<_i4.Chart?> getChartMetadata(String? chartId) =>
      (super.noSuchMethod(
            Invocation.method(#getChartMetadata, [chartId]),
            returnValue: _i3.Future<_i4.Chart?>.value(),
          )
          as _i3.Future<_i4.Chart?>);

  @override
  _i3.Stream<List<_i4.Chart>> watchChartsForState(String? state) =>
      (super.noSuchMethod(
            Invocation.method(#watchChartsForState, [state]),
            returnValue: _i3.Stream<List<_i4.Chart>>.empty(),
          )
          as _i3.Stream<List<_i4.Chart>>);

  @override
  _i3.Future<bool> refreshCatalog({bool? force = false}) =>
      (super.noSuchMethod(
            Invocation.method(#refreshCatalog, [], {#force: force}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i5.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message, {String? context, Object? exception}) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {#context: context, #exception: exception},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logError(_i6.AppError? error) => super.noSuchMethod(
    Invocation.method(#logError, [error]),
    returnValueForMissingStub: null,
  );
}
