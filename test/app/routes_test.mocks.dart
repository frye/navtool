// Mocks generated by Mockito for app routes test
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:navtool/core/logging/app_logger.dart' as _i4;
import 'package:navtool/core/services/noaa/noaa_chart_discovery_service.dart' as _i2;
import 'package:navtool/core/models/chart.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NoaaChartDiscoveryService].
class MockNoaaChartDiscoveryService extends _i1.Mock implements _i2.NoaaChartDiscoveryService {
  MockNoaaChartDiscoveryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i5.Chart>> discoverChartsByState(String? state) =>
      (super.noSuchMethod(
        Invocation.method(
          #discoverChartsByState,
          [state],
        ),
        returnValue: _i3.Future<List<_i5.Chart>>.value(<_i5.Chart>[]),
      ) as _i3.Future<List<_i5.Chart>>);

  @override
  _i3.Future<List<_i5.Chart>> searchCharts(
    String? query, {
    Map<String, String>? filters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCharts,
          [query],
          {#filters: filters},
        ),
        returnValue: _i3.Future<List<_i5.Chart>>.value(<_i5.Chart>[]),
      ) as _i3.Future<List<_i5.Chart>>);
}

/// A class which mocks [AppLogger].
class MockAppLogger extends _i1.Mock implements _i4.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(
    String? message, {
    Object? exception,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {
            #exception: exception,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(
    String? message, {
    Object? exception,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {
            #exception: exception,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    String? message, {
    Object? exception,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {
            #exception: exception,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, {
    Object? exception,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {
            #exception: exception,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );
}