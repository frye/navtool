name: NOAA Integration Test Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  FLUTTER_VERSION: '3.35.1'
  DART_VERSION: '3.9.0'

jobs:
  # Unit Tests - Fast feedback
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate mocks
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
    - name: Run unit tests with coverage
      run: |
        flutter test --coverage \
          --exclude-tags=integration,performance,real-endpoint
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        flags: unittests
        name: unit-test-coverage
        
    - name: Validate coverage threshold
      run: |
        dart run coverage:format_coverage \
          --lcov --in=coverage --out=coverage/lcov.info --report-on=lib
        
        # Check that coverage is above 90%
        COVERAGE=$(lcov --summary coverage/lcov.info | grep -oP 'lines......: \K[0-9.]+')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Coverage $COVERAGE% is below required 90%"
          exit 1
        fi

  # Integration Tests - Requires network access
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate mocks
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
    - name: Run integration tests
      env:
        # Enable real endpoint tests
        SKIP_INTEGRATION_TESTS: 'false'
      run: |
        flutter test \
          --tags=integration \
          --timeout=30m \
          --concurrency=1
          
    - name: Run real endpoint tests
      env:
        SKIP_INTEGRATION_TESTS: 'false'
      run: |
        flutter test \
          test/integration/noaa_real_endpoint_test.dart \
          --timeout=30m
      continue-on-error: true # Don't fail if NOAA API is down
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          test/integration/*.log
          coverage/

  # Performance Tests - Resource intensive
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate mocks
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
    - name: Run performance tests
      env:
        SKIP_PERFORMANCE_TESTS: 'false'
      run: |
        flutter test \
          --tags=performance \
          --timeout=20m \
          test/core/services/noaa/noaa_performance_test.dart
          
    - name: Generate performance report
      run: |
        echo "## Performance Test Results" > performance_report.md
        echo "Performance tests completed successfully" >> performance_report.md
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance_report.md

  # Cross-platform Tests
  cross-platform:
    name: Cross-platform Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    needs: unit-tests
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate mocks
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
    - name: Run core NOAA tests
      env:
        SKIP_INTEGRATION_TESTS: 'true'
        SKIP_PERFORMANCE_TESTS: 'true'
      run: |
        flutter test \
          --exclude-tags=integration,performance,real-endpoint \
          test/core/services/noaa/

  # Marine Environment Simulation Tests
  marine-environment:
    name: Marine Environment Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup network simulation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y tc wondershaper
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate mocks
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
      
    - name: Simulate marine network conditions
      run: |
        # Simulate satellite internet latency and bandwidth limits
        sudo tc qdisc add dev lo root handle 1: htb default 30
        sudo tc class add dev lo parent 1: classid 1:1 htb rate 1mbit
        sudo tc class add dev lo parent 1:1 classid 1:10 htb rate 512kbit ceil 1mbit
        sudo tc qdisc add dev lo parent 1:10 handle 10: netem delay 600ms
        
    - name: Run marine environment tests
      env:
        MARINE_SIMULATION: 'true'
        SKIP_INTEGRATION_TESTS: 'true'
      run: |
        flutter test \
          --tags=marine-environment \
          --timeout=15m
          
    - name: Cleanup network simulation
      if: always()
      run: |
        sudo tc qdisc del dev lo root || true

  # Security and Compliance Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run security analysis
      run: |
        flutter analyze --fatal-infos
        dart analyze --fatal-infos
        
    - name: Check for vulnerabilities
      run: |
        flutter pub deps
        flutter pub audit
        
    - name: Validate test coverage of security-critical code
      run: |
        # Ensure error handling and authentication code is well tested
        flutter test \
          test/core/error/ \
          test/core/services/noaa/ \
          --coverage
          
        # Check coverage of critical security paths
        dart run coverage:format_coverage \
          --lcov --in=coverage --out=coverage/security.lcov --report-on=lib/core/error,lib/core/services/noaa

  # Documentation and Examples Tests
  documentation-tests:
    name: Documentation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Validate documentation examples
      run: |
        # Test that code examples in documentation compile
        find docs/ -name "*.md" -exec grep -l "```dart" {} \; | while read file; do
          echo "Validating examples in $file"
          # Extract and validate Dart code blocks
          sed -n '/```dart/,/```/p' "$file" | sed '1d;$d' > temp_example.dart
          if [ -s temp_example.dart ]; then
            dart analyze temp_example.dart || echo "Warning: Example in $file has analysis issues"
          fi
          rm -f temp_example.dart
        done
        
    - name: Check API documentation coverage
      run: |
        dart doc --validate-links
        
    - name: Verify test fixture integrity
      run: |
        # Validate that test fixtures are valid JSON
        find test/fixtures/ -name "*.json" -exec python3 -m json.tool {} \; > /dev/null

  # Final validation and reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, cross-platform, marine-environment, security-tests, documentation-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate test summary
      run: |
        echo "# NOAA Integration Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results" >> test-summary.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "- Cross-platform Tests: ${{ needs.cross-platform.result }}" >> test-summary.md
        echo "- Marine Environment Tests: ${{ needs.marine-environment.result }}" >> test-summary.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
        echo "- Documentation Tests: ${{ needs.documentation-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Coverage Information" >> test-summary.md
        if [ -f "coverage/lcov.info" ]; then
          echo "Coverage report available in artifacts" >> test-summary.md
        fi
        
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Deployment validation for main branch
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: test-summary
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build for production
      run: |
        flutter build linux --release
        flutter build windows --release
        flutter build macos --release
        
    - name: Validate marine navigation functionality
      run: |
        # Final validation that NOAA integration works end-to-end
        flutter test \
          --tags=deployment-validation \
          --timeout=10m
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-builds
        path: |
          build/linux/x64/release/
          build/windows/runner/Release/
          build/macos/Build/Products/Release/